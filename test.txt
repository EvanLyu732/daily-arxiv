Some Orders Are Important: Partially Preserving Orders in Top-Quality Planning
Michael Katz, Junkyu Lee, Jungkoo Kang, Shirin Sohrabi

arXiv:2404.01503v1 [cs.AI] 1 Apr 2024

IBM Research
{michael.katz1, junkyu.lee, jungkoo.kang}@ibm.com, ssohrab@us.ibm.com

Abstract
The ability to generate multiple plans is central to using planning in real-life applications. Top-quality planners generate
sets of such top-cost plans, allowing flexibility in determining equivalent ones. In terms of the order between actions in a
plan, the literature only considers two extremes – either all orders are important, making each plan unique, or all orders are
unimportant, treating two plans differing only in the order of
actions as equivalent. To allow flexibility in selecting important orders, we propose specifying a subset of actions the orders between which are important, interpolating between the
top-quality and unordered top-quality planning problems. We
explore the ways of adapting partial order reduction search
pruning techniques to address this new computational problem and present experimental evaluations demonstrating the
benefits of exploiting such techniques in this setting.

Introduction
Motivated by the different settings and application domains,
the problem of finding multiple plans – diverse planning
(Nguyen et al. 2012; Katz and Sohrabi 2020), top-k planning
(Katz et al. 2018; Speck, Mattmüller, and Nebel 2020), or
top-quality planning (Katz, Sohrabi, and Udrea 2020; Katz
and Lee 2023a) – specify valid solutions by limiting either
the number of plans or their costs, requiring to find all plans
under that criterion. Some flexibility in that limitation is possible, allowing to specify an equivalence between plans as in
quotient top-quality planning. In practice, however, only two
extremes are considered in the literature – consider some
plans as equivalent, e.g., plans that differ only in the order
of the actions used, as in the case of unordered top-quality
planning, or consider all plans as unique.
In this paper, we introduce a new class of problems called
partially ordered top-quality planning, allowing us to interpolate between the two extremes by specifying a set of actions whose ordering in the plan is important. The motivation behind looking for such a middle-ground is threefold:
(1) under-specified action models (e.g., missing precondition or effect). If only one of the orders is produced, as in
the unordered top-quality setting, that plan might not correspond to a desired solution; (2) action ordering preferences:
users may have soft constraints that they wish to impose on
Copyright © 2024, Association for the Advancement of Artificial
Intelligence (www.aaai.org). All rights reserved.

action orderings, not exposed in the planning model. For example, in the rovers domain, users may impose preferences
over the order of actions such as sample soil, sample rock,
take image, as seen in the International Planning Competition (IPC) (Dimopoulos et al. 2006), or in the case of openstacks, certain products may have priority over others, and
the user may want to impose a preference over the makeproduct action; (3) known unimportant orderings. For example, in transportation domains, one may not care about the
orders between the various drive actions. Planning domains
may contain bookkeeping or auxiliary actions often resulting from transformations (e.g., Keyder and Geffner 2009)
and it may be known that the order of such auxiliary actions are not important. As the solutions for partially ordered
top-quality planning are subsets of solutions for top-quality
planning, one can solve the new problem by post-processing
the plans obtained by a top-quality planner. These planners,
however, do not benefit from partial order reduction (Katz
and Lee 2023b). In this work, we explore the possibility of
improving planner performance by exploiting partial order
reduction based pruning in the context of producing partially
ordered top-quality solutions.
Our contributions are as follows: (1) we characterize the
partial order planning problem; (2) we propose three computational approaches to solve the new planning problem.
The first approach is a simple base case: post-process the
results produced by a top-quality planner. The second and
the third approaches leverage successor punning techniques
(e.g., Wehrle and Helmert 2014), achieved either through
modification to the partial order reduction algorithm or by
inspecting the reduced set of successor actions, respectively;
(3) we prove the necessary theoretical guarantees for safe
pruning and the use of partial order reduction in the proposed approaches, and (4) we evaluate the three approaches.

Background
In this section, we introduce the necessary concepts in topquality planning and partial order reduction.

Top-quality Planning
We consider classical planning tasks in SAS+ formalism
(Bäckström and Nebel 1995), extended with action costs.
Such planning tasks Π = ⟨V , O, s0 , s⋆ ⟩ consist of a finite
set of finite-domain state variables V, a finite set of actions

 O, an initial state s0 , and the goal s⋆ . Each variable v ∈ V is
associated with a finite domain dom(v) of values. A partial
assignment p maps a subset of variables V(p) ⊆ V to values
in their domains. The value of v in p is denoted by p[v] if
v ∈ V(p) and undefined otherwise. A partial assignment s
with V(s) = V is called a state. State s is consistent with
partial assignment p if they agree on all variables in V(p),
denoted by p ⊆ s. s0 is a state and s⋆ is a partial assignment.
A state s is a goal state if s⋆ ⊆ s and Ss⋆ is the set of all goal
states. Each action o in O is a pair of partial assignments
⟨pre(o), eff (o)⟩ called precondition and effect, respectively.
Further, o has an associated cost C(o) ∈ R0+ . An action
o is applicable in s if pre(o) ⊆ s. All such actions are denoted by O(s). Applying o in s results in a state sJoK where
sJoK[v] = eff (o)[v] for all v ∈ V(eff ) and = sJoK[v] = s[v]
for all other variables. An action sequence π = ⟨o1 , · · · , on ⟩
is applicable in s if there are states s1 , · · · , sn+1 s.t. s = s1 ,
oi applicable in si , and si Joi K = si+1 for 0 ≤ i ≤ n. We
denote sn by sJπK. An action sequence with s0 JπK ∈ Ss⋆ is
called a plan. The cost of a plan π, denoted by C(π), is the
summed cost of the actions in the plan. The set of all plans
is denoted by PΠ . A plan is optimal if its cost is minimal
among all plans in PΠ . Cost-optimal planning deals with
finding an optimal plan or proving that no plan exists.
Top-quality planning (Katz, Sohrabi, and Udrea 2020;
Katz, Lee, and Sohrabi 2024) deals with finding all plans
of up to a specified cost. Formally, the top-quality planning
problem is as follows. Given a planning task Π and a number
q ∈ R0+ , find the set of plans P = {π ∈ PΠ | cost(π) ≤ q}.
In some cases, an equivalence between plans can be specified, allowing to possibly skip some plans, if equivalent
plans are found. The corresponding problem is called quotient top-quality planning and it is formally specified as follows. Given a planning task Π, an equivalence relation N
over its set of plans PΠ , and S
a number q ∈ R0+ , find a set
of plans P ⊆ PΠ such that π∈P N [π] is the solution to
the top-quality planning problem. The most common case
of such an equivalence relation is when the order of actions
in a valid plan is not significant from the application perspective. The corresponding problem is called unordered
top-quality planning and is formally specified as follows.
Given a planning task Π and a number q ∈ R0+ , find a set
of plans P ⊆ PΠ such that P is a solution to the quotient
top-quality planning problem under the equivalence relation
UΠ = {(π, π ′ ) | π, π ′ ∈ PΠ , MS(π) = MS(π ′ )}, where
MS(π) is the multi-set of the actions in π.

Partial Order Reduction
A central to partial order reduction techniques is the notion
of safe successor pruning (Wehrle and Helmert 2014).
Definition 1 (safe) Let succ be a successor pruning function for a planning task Π. We say that succ is safe if for
every state s, the cost of an optimal solution for s is the
same when using the pruned state space induced by succ as
when using the full state space.
When using safe successor pruning, it is possible to search
the pruned state space instead when searching for cost-

optimal plans. Stubborn sets (Wehrle and Helmert 2012;
Alkhazraji et al. 2012) induce safe successor pruning functions by helping identifying actions that can safely be ignored at node expansion. It is done by specifying a set, such
that if an applicable action is not in the set, it can be safely
ignored (e.g., Wehrle and Helmert 2014).
At the core of these partial order reduction techniques is
the idea that, for each non-goal state s, if a goal is reachable
from s, then at least one strongly optimal (an optimal plan
with a minimal number of 0-cost actions among all optimal
plans) is preserved in the pruned state space.
Two main notions in stubborn sets are interference
and necessary enabling sets (NES). Interference dictates
whether two actions disable each other or conflict. Necessary enabling set for an action o and a set of paths from the
initial state is a set of actions that appear on the paths that
include o before its first appearance. There are various definitions of strong stubborn sets in the literature, we use Generalized Strong Stubborn Set (GSSS) by Röger et al. (2020).
Definition 2 (GSSS) Let Π be a planning task and s be a
solvable non-goal state. Let S be the states along strongly
optimal plans for s. A set T ⊆ O is a GSSS for s if:
(i) T contains actions from a strongly optimal plan for s.
(ii) For every o ∈ T \ O(s), T contains a NES for o.
(iii) For every o ∈ T ∩ O(s), T contains all o′ ∈ O that
interfere with o in any state s ∈ S.
The successor function T(s) under T therefore returns the
applicable in s actions from T, T(s) := O(s) ∩ T.

Partially Ordered Top-Quality Planning
For a sequence of actions π and a subset of task actions X,
we denote by π |X the subsequence obtained from π by removing actions not in X. With that, we can define a relation
over the set of all plans PΠ as
PX = {(π, π ′ ) | π, π ′ ∈ PΠ , MS(π) = MS(π ′ ), π |X= π ′ |X }.
The relation PX is an equivalence relation: it is reflexive,
transitive, and symmetric. With that relation, we can define
the partially ordered top-quality planning as follows.
Definition 3 Let Π be some planning task over the actions
O and PΠ be the set of its plans. The partially ordered topquality planning problem is defined as follows.
Given a set of actions X and a number q ∈ R0+ , find a set
of plans P ⊆ PΠ that is a solution to the quotient top-quality
planning problem under the equivalence relation PX .
The notion of safe successor pruning in Definition 1 captures safety for cost-optimal planning, where any plan of
minimal cost is a valid solution. However, when discussing
top-quality planning in general and partially ordered topquality planning in particular, the notion of safety changes.
Definition 4 (top-quality safe) Let succ be a successor
pruning function for a planning task Π and let X be a subset
of actions of Π. We say that succ is safe for partially ordered
top-quality planning if for every state s and for every plan
πs for s, there exists a path πs′ in the pruned state space
induced by succ, such that (πs , πs′ ) ∈ PX .

 Solve Partially Ordered Top-Quality Planning
In order to solve the defined computational problem, one
can use an existing top-quality planner, post-processing the
obtained plans. The currently best performing among these
planners is K ∗ (Lee, Katz, and Sohrabi 2023), which can exploit successor pruning techniques to improve its efficiency,
as in unordered top-quality planning (Katz and Lee 2023a).
The most popular successor pruning techniques are based
on partial order reduction methods exploiting stubborn sets
(Wehrle and Helmert 2012; Alkhazraji et al. 2012). The idea
behind these techniques is that a successor can be pruned
as long as for every plan pruned there exists a reordering of
that plan that is also a plan and it starts with an action that is
not pruned. Although such pruning technique is deemed safe
for unordered top-quality planning with K ∗ (Katz and Lee
2023a), it may prune some reorderings of the found plans.
Consequently, it cannot be directly applied to top-quality
planning or partially ordered top-quality planning.
In order to be able to use partial order reduction based
pruning for partially ordered top-quality planning, we need
to ensure that the successor function is safe for partially ordered top-quality planning. This can be done by either modifying the partial order reduction algorithm or externally, by
inspecting the reduced set of successor actions. Let us start
with the latter first.

Extending The Reduced Successors
Given the set of applicable actions O(s) and a partial order reduction successor function T(s), we can define an extended successor function as follows.

T(s) ∩ X = ∅,
T(s)
TX (s) = T(s) ∪ X T(s) ∩ X ̸= ∅ ∧ X \ O(s) = ∅,

O(s)
otherwise
We show that TX (s) can be used for partial ordered topquality planning.
Theorem 1 The successor function TX (s) is safe for partial ordered top-quality planning, when T is a GSSS.
Proof: Let Π be a planning task, s be some state, T(s) be a
strong stubborn set successor function, and πs = o1 . . . on
be some plan for s. If o1 ̸∈ TX (s), let k be the smallest
index such that ok ∈ TX (s). We start by noting that πs′ =
ok o1 . . . ok−1 ok+1 . . . on obtained from πs by moving the
action ok to the front, is also a plan for s. The claim stems
from TX (s) pruning at most as much as T(s) and therefore
the correctness was shown by Wehrle and Helmert (2014).
Now, we show that (πs , πs′ ) ∈ PX . If ok ̸∈ X, then
(πs , πs′ ) ∈ PX and we are done. Assume now that ok ∈ X.
Since ok ∈ X and ok ∈ TX (s), we have TX (s)∩X ̸= ∅ and
therefore TX (s) ̸= T(s). Since we also have o1 ̸∈ TX (s),
we have TX (s) ̸= O(s) and thus TX (s) = T(s) ∪ X, the
second case of the definition. Since k is the smallest index
such that ok ∈ T(s), for all 1 ≤ i < k we have oi ̸∈ TX (s)
and therefore oi ̸∈ X, giving us again (πs , πs′ ) ∈ PX .
□
A simple example shows that it is not sufficient to add
the set X to the reduced successor function when not all

actions in X are applicable. Let s = {v0 =0, v1 =0}, s⋆ =
{v0 =2, v1 =1}, and O = {o1 = ⟨{v0 =0}, {v0 =1}⟩, o2 =
⟨{v0 =1}, {v0 =2}⟩, o3 = ⟨{v1 =0}, {v1 =1}⟩}. There are
three plans for s, namely π1 = o1 o2 o3 , π2 = o3 o1 o2 , and
π3 = o1 o3 o2 . If X = {o2 , o3 }, then PX = {(π2 , π3 )}.
Since O(s) = {o1 , o3 } and o1 and o3 are completely independent, a partial order reduction may reduce either of these
actions. If T(s) = {o3 }, the plans π1 and π3 are pruned, and
π2 remains. While π3 is equivalent to π2 , π1 is not. The plan
π2 , obtained from π1 by moving the action o3 to the front,
changes the order between actions o2 and o3 .
The benefit of the approach above is that it can work with
any partial order reduction technique and does not require
modifications to the technique. We now move to the other
approach of modifying the partial order reduction technique.

Modifying Partial Order Reduction
Focusing on stubborn sets, we show that it is sufficient to
extend condition iii of Definition 2 by adding another condition on top of interference.
Definition 5 (PO-GSSS) Let Π be a planning task over the
actions O and X ⊂ O be some set of its actions. Let s be
a solvable non-goal state. Let S be the states along strongly
optimal plans for s. A set T ⊆ O is a PO-GSSS for s if:

(i) T contains actions from a strongly optimal plan for s.
(ii) For every o ∈ T \ O(s), T contains a NES for o.
(iii) For every o ∈ T ∩ O(s), T contains all o′ ∈ O that
interfere with o in any state s ∈ S.
(iv) For every o ∈ T ∩ O(s), if o ∈ X, T contains all
actions in X.

Theorem 2 PO-GSSS is safe for partial ordered top-quality
planning.
Proof: Let Π be a planning task, s be some state, T be a
PO-GSSS for s, and πs = o1 . . . on be some plan for s.
Let k be the minimal index such that ok ∈ T. Since T is
a super-set of a generalized strong stubborn set, using the
same argument as Wehrle and Helmert (2014), we can show
that ok is applicable. Let πs′ = ok o1 . . . ok−1 ok+1 . . . on If
ok ̸∈ X, then (πs , πs′ ) ∈ PX and we are done. If ok ∈ X,
then for all 1 ≤ i < k, oi ̸∈ X, due to k being smallest such
index and therefore, again, (πs , πs′ ) ∈ PX .
□

Experimental Evaluation
To evaluate the performance of our suggested approaches we
implemented these approaches on top of K ∗ algorithm implementation (Lee, Katz, and Sohrabi 2023), which in turn is
built on top of the Fast Downward planning system (Helmert
2006). The code is available at https://github.com/ibm/kstar.
All experiments were performed on Intel(R) Xeon(R) Gold
6248 CPU @ 2.50GHz machines, with the timeout of 30
minutes and memory limit of 3.5GB per run. The benchmark set consists of STRIPS benchmarks from optimal tracks
of International Planning Competitions 1998-2018. We have
manually specified a subset of actions of which to preserve

 Number of actions

550

100

500

10−1

104

450

10−2

103
102

unordered top-quality

105

number of tasks

All actions

106

400

350

101
300

100
250

10−1

100

101 102 103 104
Order-important actions

105

106

200
200

400

600

(a)

800

1000

time (s)

1200

1400

1600

10−3
10−4
10−5
10−6

NoPOR
POR+
POGSSS

10−1

Number of found plans (normalized)

1800

10−7 −7
10

10−6

10−5 10−4 10−3 10−2 10−1
partially ordered top-quality

(b)

100

(c)

Figure 1: (a) The number of captured actions compared to the total number of actions, (b) anytime performance of tested
configurations, and (c) the solution size (number of plans) for partially ordered top-quality planning compared to solution size
of unordered top-quality planning, normalized by the solution size of top-quality planning.
agricola
(take f ood|plow f ield|build f ences|improve home).∗
airport
takeof f seg.∗
barman
(clean-shot|clean-shaker|empty-shake).∗
blocks
put-down.∗
depot
(load|unload).∗
driverlog
(load-truck|unload-truck|board-truck).∗
floortile
paint.∗
freecell
send.∗
ged
reset.∗
gripper
pick.∗
hiking
put.∗
logistics
(load|unload).∗
miconic
board.∗
movie
re.∗
mprime
succumb.∗
mystery
succumb.∗
nomystery
(load|unload).∗
openstacks
make-product.∗
organic-synthesis sodium.∗
parcprinter
(color|lc1).∗
parking
move-car-to-car.∗
pathways
initialize.∗
pipesworld
push-start.∗
psr-small
open.∗
rovers
(sample|take image).∗
satellite
take image.∗
scanalyzer
rotate.∗
snake
move-and-eat-spawn.∗
spider
start-dealing.∗
storage
lif t.∗
termes
. ∗ -block.∗
tidybot
f inish-object.∗
tpp
buy.∗
transport
(pick-up|drop).∗
trucks
(load|unload|deliver).∗
woodworking
load.∗
zenotravel
board.∗

Table 1: Regular expressions that are used in the experimental evaluation to capture order-important actions.
the orders per domain, for a total of 52 domains, with the
total number of 1555 tasks. The regular expressions capturing the names of actions whose orders are important are
provided in Table 1. We compared our two suggested ap-

Coverage
airport (50)
driverlog (20)
movie (30)
mystery (30)
organic-synthesis-split18 (20)
parcprinter-08 (30)
parcprinter11 (20)
parking14 (20)
psr-small (50)
satellite (36)
snake18 (20)
termes18 (20)
tidybot14 (20)
woodworking08 (30)
woodworking11 (20)
Sum other (1139)
Sum (1555)

NoPOR
7
10
3
20
18
6
3
2
46
5
4
4
6
7
2
307
450

POR+
8
11
22
22
19
10
6
3
48
6
6
5
7
21
15
307
516

POGSSS
8
11
22
22
18
11
7
2
48
7
5
5
7
21
15
307
516

Table 2: Per-domain coverage of the tested approaches. The
last row depicts the overall coverage.

proaches of extending the POR successor generator (denoted
by POR+) and of modifying the definition of generalized
strong stubborn sets (denoted by PO-GSSS) to a baseline,
running a top-quality planner and post-processing the plans
to filter out equivalent plans (denoted by NoPOR). We use
K ∗ with symmetry based pruning (Katz and Lee 2023b) and
LM cut heuristic (Helmert and Domshlak 2009). We experiment with the atom-centric stubborn sets (Röger et al. 2020).
In our experiments, we measure the coverage of solving the
partially ordered top-quality planning problem for q = 1,
i.e., finding all non-equivalent cost-optimal plans.
First, to show that we capture a non-trivial subset of actions, Figure 1 (a) plots the number of order-important compared to the total number of actions. Out of 1555 tasks, in
15 cases all actions are marked as order-important (nodes on
the diagonal), and in 37 cases none were marked as orderimportant. Moving on to the coverage results, the overall

 any-time coverage is shown in Figure 1 (b). Note that both
POR+ and PO-GSSS have a very similar performance, significantly outperforming the baseline approach that does not
perform partial order reduction. The per-domain coverage
for the full 30 minutes time bound is shown in Table 2.
There are 15 domains where the coverage is not the same for
all three tested approaches. The most significant increase in
coverage from exploiting partial order reduction appears in
the movie domain (from 3 to 22), following by woodworking domains (from 7 and 2 to 21 and 15). Finally, Figure
1 (c) depicts the solutions size (number of plans) of the
partially ordered top-quality planning problem, comparing
to unordered top-quality planning. Both are normalized by
the full top-quality planning solution size, fitting both values into a [0,1] range. Out of 325 tasks where all three of
these values are available, 109 are on the diagonal. Out of
the other 216 tasks, the largest relative decrease from topquality solution size was in pathways, from 4M to 8 plans.

Discussion and Future Work
We propose a new computational problem in top-quality
planning, interpolating between the pure top-quality and
the unordered top-quality. We adapt partial order reduction
pruning technique to address this new computational problem, showing that such pruning is practically beneficial.
For future work, we would like to explore the possibility to prune all orders during search, while efficiently reconstructing the important orders from the unordered topquality solution. Another important avenue for future research is how to efficiently capture a more general class of
problems in top-quality that deal with preserving some orders. For example, two plans that use different instances of
essentially the same action might be considered equivalent
from application perspective. That can happen, for instance,
as part of translation from PDDL to SAS+ .

References
Alkhazraji, Y.; Wehrle, M.; Mattmüller, R.; and Helmert, M.
2012. A Stubborn Set Algorithm for Optimal Planning. In
De Raedt, L.; Bessiere, C.; Dubois, D.; Doherty, P.; Frasconi, P.; Heintz, F.; and Lucas, P., eds., Proceedings of the
20th European Conference on Artificial Intelligence (ECAI
2012), 891–892. IOS Press.
Bäckström, C.; and Nebel, B. 1995. Complexity Results for
SAS+ Planning. Computational Intelligence, 11(4): 625–
655.
Barták, R.; Ruml, W.; and Salzman, O., eds. 2023. Proceedings of the 16th Annual Symposium on Combinatorial
Search (SoCS 2023). AAAI Press.
Conitzer, V.; and Sha, F., eds. 2020. Proceedings of the
Thirty-Fourth AAAI Conference on Artificial Intelligence
(AAAI 2020). AAAI Press.
Dimopoulos, Y.; Gerevini, A.; Haslum, P.; and Saetti, A.
2006. The benchmark domains of the deterministic part of
IPC-5. In Fifth International Planning Competition (IPC-5):
Planner Abstracts, 14–19.
Helmert, M. 2006. The Fast Downward Planning System.
Journal of Artificial Intelligence Research, 26: 191–246.

Helmert, M.; and Domshlak, C. 2009. Landmarks, Critical
Paths and Abstractions: What’s the Difference Anyway? In
Gerevini, A.; Howe, A.; Cesta, A.; and Refanidis, I., eds.,
Proceedings of the Nineteenth International Conference on
Automated Planning and Scheduling (ICAPS 2009), 162–
169. AAAI Press.
Katz, M.; and Lee, J. 2023a. K* and Partial Order Reduction
for Top-quality Planning. In (Barták, Ruml, and Salzman
2023).
Katz, M.; and Lee, J. 2023b. K* Search Over Orbit Space for
Top-k Planning. In Elkind, E., ed., Proceedings of the 32nd
International Joint Conference on Artificial Intelligence (IJCAI 2023). IJCAI.
Katz, M.; Lee, J.; and Sohrabi, S. 2024. Unifying and
Certifying Top-Quality Planning. In Bernardini, S.; and
Muise, C., eds., Proceedings of the Thirty-Fourth International Conference on Automated Planning and Scheduling
(ICAPS 2024). AAAI Press.
Katz, M.; and Sohrabi, S. 2020. Reshaping Diverse Planning. In (Conitzer and Sha 2020), 9892–9899.
Katz, M.; Sohrabi, S.; and Udrea, O. 2020. Top-Quality
Planning: Finding Practically Useful Sets of Best Plans. In
(Conitzer and Sha 2020), 9900–9907.
Katz, M.; Sohrabi, S.; Udrea, O.; and Winterer, D. 2018. A
Novel Iterative Approach to Top-k Planning. In de Weerdt,
M.; Koenig, S.; Röger, G.; and Spaan, M., eds., Proceedings of the Twenty-Eighth International Conference on Automated Planning and Scheduling (ICAPS 2018), 132–140.
AAAI Press.
Keyder, E.; and Geffner, H. 2009. Soft Goals Can Be Compiled Away. Journal of Artificial Intelligence Research, 36:
547–556.
Lee, J.; Katz, M.; and Sohrabi, S. 2023. On K* Search for
Top-k Planning. In (Barták, Ruml, and Salzman 2023).
Nguyen, T. A.; Do, M. B.; Gerevini, A.; Serina, I.; Srivastava, B.; and Kambhampati, S. 2012. Generating diverse
plans to handle unknown and partially known user preferences. Artificial Intelligence, 190: 1–31.
Röger, G.; Helmert, M.; Seipp, J.; and Sievers, S. 2020. An
Atom-Centric Perspective on Stubborn Sets. In Harabor, D.;
and Vallati, M., eds., Proceedings of the 13th Annual Symposium on Combinatorial Search (SoCS 2020), 57–65. AAAI
Press.
Speck, D.; Mattmüller, R.; and Nebel, B. 2020. Symbolic
Top-k Planning. In (Conitzer and Sha 2020), 9967–9974.
Wehrle, M.; and Helmert, M. 2012. About Partial Order
Reduction in Planning and Computer Aided Verification.
In McCluskey, L.; Williams, B.; Silva, J. R.; and Bonet,
B., eds., Proceedings of the Twenty-Second International
Conference on Automated Planning and Scheduling (ICAPS
2012), 297–305. AAAI Press.
Wehrle, M.; and Helmert, M. 2014. Efficient Stubborn Sets:
Generalized Algorithms and Selection Strategies. In Chien,
S.; Fern, A.; Ruml, W.; and Do, M., eds., Proceedings of
the Twenty-Fourth International Conference on Automated
Planning and Scheduling (ICAPS 2014), 323–331. AAAI
Press.

